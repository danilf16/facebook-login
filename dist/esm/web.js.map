{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type {\n  FacebookLoginPlugin,\n  FacebookLoginResponse,\n  FacebookCurrentAccessTokenResponse,\n  FacebookGetLoginStatusResponse,\n  FacebookGetProfileResponse,\n  FacebookConfiguration,\n} from './definitions';\n\ndeclare interface Facebook {\n  init(\n    options: Partial<{\n      appId: string;\n      autoLogAppEvents: boolean;\n      xfbml: boolean;\n      version: string;\n    }>,\n  ): void;\n\n  login(handle: (response: any) => void, options?: { scope: string }): void;\n\n  logout(handle: (response: any) => void): void;\n\n  reauthorize(handle: (response: any) => void): void;\n\n  getLoginStatus(handle: (response: FacebookGetLoginStatusResponse) => void): void;\n\n  api<TResponse>(path: string, callback: (response: TResponse) => void): void;\n  api<TParams extends Record<string, unknown>, TResponse>(\n    path: string,\n    params: TParams,\n    callback: (response: TResponse) => void,\n  ): void;\n  api<TParams extends Record<string, unknown>, TResponse>(\n    path: string,\n    method: 'get' | 'post' | 'delete',\n    params: TParams,\n    callback: (response: TResponse) => void,\n  ): void;\n  logEvent(handle: (response: any) => void, options: { eventName: string }): void;\n  setAutoLogAppEventsEnabled(handle: (response: any) => void, options: { enabled: boolean }): void;\n  setAdvertiserTrackingEnabled(handle: (response: any) => void, options: { enabled: boolean }): void;\n  setAdvertiserIDCollectionEnabled(handle: (response: any) => void, options: { enabled: boolean }): void;\n}\n\ndeclare let FB: Facebook;\n\ndeclare global {\n  interface Window {\n    fbAsyncInit: () => void;\n  }\n}\n\nexport class FacebookLoginWeb extends WebPlugin implements FacebookLoginPlugin {\n  async initialize(options: Partial<FacebookConfiguration>): Promise<void> {\n    const defaultOptions = { version: 'v17.0' };\n    await this.loadScript(options.locale);\n    return FB.init({ ...defaultOptions, ...options });\n  }\n\n  private loadScript(locale: string | undefined): Promise<void> {\n    if (typeof document === 'undefined') {\n      return Promise.reject('document global not found');\n    }\n    const scriptId = 'fb';\n    const scriptEl = document.getElementById(scriptId);\n    if (scriptEl) {\n      // already loaded\n      return Promise.resolve();\n    }\n\n    const head = document.getElementsByTagName('head')[0];\n    const script = document.createElement('script');\n    return new Promise<void>((resolve) => {\n      script.onload = () => resolve();\n      script.defer = true;\n      script.async = true;\n      script.id = scriptId;\n      script.src = `https://connect.facebook.net/${locale ?? 'en_US'}/sdk.js`;\n      head.appendChild(script);\n    });\n  }\n\n  async login(options: { permissions: string[] }): Promise<FacebookLoginResponse> {\n    return new Promise<FacebookLoginResponse>((resolve, reject) => {\n      FB.login(\n        (response) => {\n          if (response.status === 'connected') {\n            resolve({\n              accessToken: {\n                token: response.authResponse.accessToken,\n              },\n            });\n          } else {\n            reject({\n              accessToken: {\n                token: null,\n              },\n            });\n          }\n        },\n        { scope: options.permissions.join(',') },\n      );\n    });\n  }\n\n  async logout(): Promise<void> {\n    return new Promise<void>((resolve) => FB.logout(() => resolve()));\n  }\n\n  async reauthorize(): Promise<FacebookLoginResponse> {\n    return new Promise<FacebookLoginResponse>((resolve) => FB.reauthorize((it) => resolve(it)));\n  }\n\n  async getCurrentAccessToken(): Promise<FacebookCurrentAccessTokenResponse> {\n    return new Promise<FacebookCurrentAccessTokenResponse>((resolve, reject) => {\n      FB.getLoginStatus((response) => {\n        if (response.status === 'connected') {\n          const result: FacebookCurrentAccessTokenResponse = {\n            accessToken: {\n              applicationId: undefined,\n              declinedPermissions: [],\n              expires: undefined,\n              isExpired: undefined,\n              lastRefresh: undefined,\n              permissions: [],\n              token: response.authResponse.accessToken,\n              userId: response.authResponse.userID,\n            },\n          };\n          resolve(result);\n        } else {\n          reject({\n            accessToken: {\n              token: null,\n            },\n          });\n        }\n      });\n    });\n  }\n\n  async getProfile<T extends Record<string, unknown>>(options: { fields: readonly string[] }): Promise<T> {\n    const fields = options.fields.join(',');\n\n    return new Promise<T>((resolve, reject) => {\n      FB.api<{ fields: string }, FacebookGetProfileResponse>('/me', { fields }, (response) => {\n        if (response.error) {\n          reject(response.error.message);\n          return;\n        }\n        resolve(response as unknown as T);\n      });\n    });\n  }\n\n  async logEvent(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  async setAutoLogAppEventsEnabled(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  async setAdvertiserTrackingEnabled(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  async setAdvertiserIDCollectionEnabled(): Promise<void> {\n    return Promise.resolve();\n  }\n}\n"]}